# This playbook adds retention rules that apply to snapshots and file clones.
---
- hosts: localhost
  gather_facts: False
  vars_files:
    retention:
      {"name":"1_day","retentionTime":"86400000","numOfCopies":null}

  tasks:
  - name: Create snapshot retention schedules
    uri:
      url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/snapshot-retentions"
      user: "{{ hsuser }}"
      password: "{{ password }}"
      method: POST
      body: '{{ retention }}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      validate_certs: no
    register: __results
    failed_when:
      - __results.status == 500
## The next two tasks are only executed when the retention already exists
  - name: Get current retention
    when: __results.status == 400
    uri:
      url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/snapshot-retentions/{{ retention.name | urlencode }}"
      user: "{{ hsuser }}"
      password: "{{ password }}"
      method: GET
      body: '{}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      validate_certs: no
    register: update_get
  - name: Update current retention
    when: __results.status == 400
    uri:
      url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/snapshot-retentions/{{ update_get.json.uoid.uuid }}"
      user: "{{ hsuser }}"
      password: "{{ password }}"
      method: PUT
      body: '{{ update_get.json|combine(retention)}}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      validate_certs: no
